
plugins {
  id 'c'
  id 'cpp'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
  id 'edu.wpi.first.NativeUtils' version '2022.5.1'
  id 'edu.wpi.first.GradleVsCode' version '1.1.0'
}

ext.buildwin32 = true

repositories {
  mavenCentral()
}
wpilibRepositories.addAllReleaseRepositories(project)

// Apply C++ configuration
apply from: 'config.gradle'

// Set up exports properly
nativeUtils {
  privateExportsConfigs {
    // Only export explicit symbols from driver library
    FRC_CAN_Reader_Native {
      exportsFile = project.file("src/main/driver/symbols.txt")
      performStripAllSymbols = true
    }
  }
}

model {
  components {
    Candle(NativeLibrarySpec) {
      sources {
        c {
          source {
            srcDirs 'src/main/driver/c'
            include '**/*.c'
          }
          exportedHeaders {
            srcDirs 'src/main/driver/include'
            srcDirs 'src/main/driver/privateinclude'
          }
        }
      }
    }
    FRC_CAN_Reader_Native(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/driver/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/driver/include'
            srcDirs 'src/main/driver/privateinclude'
          }
        }
      }

      binaries.all {
        lib library: 'Candle', linkage: 'static'
        nativeUtils.useRequiredLibrary(it, "wpiutil_static")
      }
    }
    TestExe(NativeExecutableSpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/exe/cpp'
          }
        }
      }

      binaries.all {
        lib library: 'FRC_CAN_Reader_Native', linkage: 'shared'
        lib library: 'Candle', linkage: 'static'
        nativeUtils.useRequiredLibrary(it, "wpiutil_static")
      }
    }
  }

  tasks {
    def c = $.components
    copyBinaries(Task) { Task t ->
      def files = [:]
      c.each {
        if (it.name != 'FRC_CAN_Reader_Native') return
        it.binaries.withType(SharedLibraryBinarySpec).each {
          if(it.buildType.name != 'release') return
          t.dependsOn it.tasks.link
          t.inputs.file it.sharedLibraryFile
          files.put(it.targetPlatform.name, it.sharedLibraryFile)
        }
      }
      t.outputs.dir "$buildDir/../../FRCCANViewer/Natives"
      doLast {
        files.each { f ->
          copy {
            from f.value
            into "$buildDir/../../FRCCANViewer/Natives"
            rename {

              return "${f.value.name}.${f.key}"
            }
          }
          println f.value.name
          println f.key
          println f.value
        }
      }
    }
  }
}

wrapper {
  gradleVersion '7.2'
}
